/*
    Server
    基于UDP协议的简单网络通信程序
*/

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <netinet/in.h>
#include <sys/socket.h>

int main()
{
    // 创建套接字
    int sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if(sockfd < 0){
        perror("socket error");
        return -1;
    }
    // 为套接字绑定地址信息
    struct sockaddr_in addr;  // sockaddr_in结构体，会先预留2字节sa_family_t存放地址信息以供解析其他内容
                              /*
                                  struct sockaddr{
                                      sa_family_t sa_family;
                                      char        sa_data[14];
                                  }
                              */  
    addr.sin_family = AF_INET;
    // 大于一字节数据可能需要字节序转换
    // uint16_t htons(uint16_t hostshort);  // 2个字节整型数据的主机字节序到网络字节序的转换
    addr.sin_port = htons(9000);  
    // addr.sin_addr.s_addr = "192.168.122.135";
    // addr.sin_addr.s_addr = htonl(0xc0a87a87); // 4个字节整型数据的主机字节序到网络字节序的转换
    // in_addr_t inet_addr(const char *cp); // 将点分十进制字符串ip地址转换为网络字节序
    addr.sin_addr.s_addr = inet_addr("192.168.122.135");
    socketlen_t len = sizeof(struct sockaddr_in);
    int ret = bind(sockfd, (struct sockaddr*)&addr, len);
    if(ret < 0){
        perror("bind error");
        return -1;
    }
    // 接受数据
    memset(buff,0x00,1024);
    char buff[1024] = {0};
    struct sockaddr_in cli_addr;
    recvfrom(sockfd, buff, 1023, 0, (struct sockaddr*)&cli_addr, &len);
    printf("client say:%s\n",buff);
    // 发送数据
    scanf("%s",buff);
    sendto(sockfd, buff, strlen(buff), 0, (struct sockaddr*)&cli_addr,len);
    printf("server say:%s\n");
    // 关闭套接字
    close(sockfd);
}

--------------------------------------------------------------------------------------------------------------------------


/*
    Client
    基于UDP协议的简单网络通信程序
    使用C++对udp socket进行封装
*/

#include <stdio.h>
#include <iostream>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <netinet/in.h>
#include <sys/socket.h>

class UdpSocket
{
private:
    int _sockfd;
    
public:
    UdpSocket():_sockfd(-1){}
    bool Socket()
    {
        _sockfd = socket(AF_INET, sock_DGRAM, IPPROTO_UDP);
        if(_sockfd < 0){
            perror("socket error");
            return false;
        }
        return true;
    }
    bool Bind(std::string &ip, uint16_t port)
    {
        sockaddr_in addr;
        addr.sin_family = AF_INET;
        addr.sin_port = htons(port);
        addr.sin_addr.s_addr = inet_addr(ip.c_str());
        socketlen_t len = sizeof(socketaddr_in);
        int ret = bind(_sockfd, (sockaddr*)&addr, len);
        if(ret < 0){
            perror("bind error");
            return false;
        }
        return true;
    }
    ssize_t Recv(char *buf, sockaddr_in *addr) // ssize_t 32位
    {
        sockaddr_in _addr;
        ssize_t rlen;
        socklen_t len = sizeof(sockaddr_in);
        rlen = recvfrom(_sockfd, buf, 1024, 0, (sockaddr*)&_addr, &len);
        if(rlen < 0){
            perror("sendto error");
            return -1;
        }
        if(addr){
            memcpy((void*)addr, (void*)&_addr, len);
        }
        return rlen;
    }
    bool Send(char *buf, size_t len, sockaddr_in &addr)
    {
        int slen = 0;
        slen = sendto(_sockfd, buf, len, 0, (sockaddr*)&addr, sizeof(sockaddr));
        if(slen < 0){
            perror("sendto error");
            return false;
        }
        return true;
    }
    bool Close(sockfd)
    {
        if(_sockfd >= 0){
            close(_sockfd);
            _sockfd = -1;
        }
        return true;
    }   
};
#define CHECK_RET(q) if(q == false){return -1;}

int main()
{
    UdpSocket sock;
    CHECK_RET(sock.Socket());
    sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(9000);
    addr.sin_addr.s_addr = inet_addr("192.168.122.135");
    
    while(1){
        char buff[1024] = {0};
        scanf("%[^\n]",buff);
        sock.Send(buff, strlen(buff), addr);
        printf("Client say:%s\n",buff);
        
        meset(buff, 0x00, 1024);
        sock.Recv(buff);
        printf("Sever say:%s\n",buff);
    }    
    sock.Close();
   return 0; 
}
