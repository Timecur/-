class Solution {
public:
    class UnionFindSet{
    public:
        UnionFindSet(int size = 27)
            :_ufs(size, -1){}
        
        int FindRoot(int index){
            while(_ufs[index] >= 0)
                index = _ufs[index];
            return index;
        }
        
        bool Union(int x, int y){
            int r1 = FindRoot(x);
            int r2 = FindRoot(y);
            
            if(r1 == r2) return false;
            
            _ufs[r1] += _ufs[r2];
            _ufs[r2] = r1;
            
            return true;
        }
        
        
    private:
        vector<int> _ufs;
    };
    
    
    bool equationsPossible(vector<string>& equations) {
        UnionFindSet s;
        
        vector<string> tmp;
        for(int i = 0; i < equations.size(); i++){
            if(equations[i].substr(1,2) == "=="){
                s.Union(equations[i][0]-'a', equations[i][3]-'a');
            }
            else{
                tmp.push_back(equations[i]);
            }
        }
        
        for(int j = 0; j < tmp.size(); j++){
            if(s.FindRoot(tmp[j][0]-'a') == s.FindRoot(tmp[j][3]-'a'))
                return false;
        }
        return true;
    }       
};
